----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION verification(login IN VARCHAR(50), pass IN VARCHAR(50)) 
RETURNS INT AS $$
DECLARE
    priority_found INT;
BEGIN
    SELECT priority INTO priority_found
    FROM UTENTE
    WHERE UTENTE.login = verification.login AND UTENTE.password = verification.pass;

    IF FOUND THEN
        RETURN priority_found;
    ELSE
        RETURN -1; -- Utente non trovato
    END IF;
END;
$$
LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION convRuolo(ruoli IN VARCHAR(100)) 
RETURN VARCHAR(20) AS $$
DECLARE
	pos INT;
	ruolo VARCHAR(20);
BEGIN
	pos := INSTR(ruoli, '_', 1);
	
	IF pos > 0 THEN
		ruolo := SUBSTR (ruoli, 1, pos - 1);
	ELSE
		ruolo := ruoli;
	END IF;
	
	RETURN ruolo;
END; 
$$
LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER checkPortiere AS
BEFORE INSERT OR UPDATE OF goalSubiti ON goalsubiti
FOR EACH ROW
DECLARE
	ruolo VARCHAR(20);
BEGIN
	ruolo := convRuolo(SELECT R.ruolo FROM RUOLO AS R, CALCIATORE AS C WHERE R.id_giocatore = C.id_giocatore AND C.id_giocatore = NEW.id_giocatore);
	IF ruolo <> 'portiere' THEN
		RAISE EXCEPTION('Il giocatore che stai inserendo non è portiere.');
	END IF;
END;
----------------------------------------------------------------------------------------------------------------
CREATE TRIGGER inserimentoRosa
AFTER INSERT ON Militanza
FOR EACH ROW
BEGIN
	INSERT INTO rosa (anno, id_giocatore, squadra)
	VALUES (NEW.inizio, NEW.id_giocatore, NEW.squadra);
END;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION controllaNumGiocatoriFunction() RETURNS TRIGGER AS $$
DECLARE
    numGiocatori INT;
BEGIN
    SELECT COUNT(id_giocatore) INTO numGiocatori
    FROM rosa
    WHERE squadra = NEW.squadra
    GROUP BY squadra, anno;

    IF numGiocatori < 16 THEN
        RAISE EXCEPTION 'La squadra ha troppi pochi giocatori per partecipare alla competizione.';
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER controllaNumGiocatori
BEFORE INSERT ON squadra_gioca_in_competizioni_nazionali
FOR EACH ROW
EXECUTE FUNCTION controllaNumGiocatoriFunction();
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE inserisci_Calciatore_Ruolo_Sponsor_Squadra_Militanza(
    nomeC VARCHAR(100), 
    cognomeC VARCHAR(100), 
    nazioneC VARCHAR(100), 
    dataNascitaC DATE, 
    dataRitiroC VARCHAR(100), 
    piedePr VARCHAR(20),
    ruolo VARCHAR(200),
    sponsorNome VARCHAR(100),
    nomeSquadra VARCHAR(100), 
    nazionalita VARCHAR(100),
    inizioMil VARCHAR(20), 
    fineMil VARCHAR(20), 
    tiriSegnati INT, 
    partiteGiocate INT, 
    goalSubiti INT)
AS $$
DECLARE
    id_gio VARCHAR(20);
    numC INT;
    id_mil VARCHAR(20);
    numM INT;
    michele Calciatore%ROWTYPE;
    micheleSquad Squadre%ROWTYPE;
    alfredoSponsor Squadra%ROWTYPE;
    numGiocatori INT;
BEGIN
    	-- Controllo se esiste già il calciatore
	SELECT *
    	INTO michele
    	FROM Calciatore AS c
    	WHERE c.nome ILIKE nomeC AND c.Cognome ILIKE cognomeC AND c.Nazione ILIKE nazioneC AND c.nascita = dataNascitaC;

    	IF michele IS NULL THEN

        	-- Non esiste il calciatore, passo al prossimo controllo
        
        	IF nazionalita IS NOT NULL THEN

            		-- Se la nazionalità non è null, vuol dire che la squadra è stata inserita dall'admin

            		SELECT *
            		INTO micheleSquad
            		FROM Squadre AS s
            		WHERE s.nomeSquarda ILIKE nomeSquadra;

            		IF micheleSquad IS NULL THEN

                		-- Controllo lo sponsor inserito

                		SELECT *  
                		INTO alfredoSponsor
                		FROM Squadra AS s
                		WHERE s.nomeSponsor ILIKE sponsorNome;

                		IF alfredoSponsor IS NULL THEN

                    			-- Genero un nuovo ID per il calciatore

                    			id_gio := genera_id('Calciatore', 'id_giocatore');

                    			-- Inserisco calciatore

                    			INSERT INTO Calciatore(nome, cognome, nazione, nascita, dataritiro, piedepr, id_giocatore)
                    			VALUES (nomeC, cognomeC, nazioneC, dataNascitaC, dataRitiroC, piedePr, id_gio);

                    			-- Inserisco ruolo

                    			INSERT INTO Ruolo(ruolo, id_giocatore)
                    			VALUES (ruolo, id_gio);

                   			-- Inserisco sponsor

                    			INSERT INTO SponsorTec(nome)
                    			VALUES (nomeSponsor);

                    			-- Inserisco squadra

                    			INSERT INTO Squadre(nomeSquadra, nazionalita, nomeSponsor)
                   			VALUES (nomeSquadra, nazionalita, nomeSponsor);

                    			-- Genero un nuovo ID per la militanza

                    			id_mil := genera_id('Militanza', 'id_militanza');

                    			-- Inserisco militanza

                    			INSERT INTO Militanza(inizio, fine, tirisegnati, partiteGiocate, squadra, giocatore, id_militanza)
                    			VALUES (inizioMil, fineMil, tiriSegnati, partiteGiocate, nomeSquadra, id_gio, id_mil);

                   			-- Inserisco goalSubiti se non è null

                    			IF goalSubiti IS NOT NULL THEN
                        			INSERT INTO Goalsubiti(goalSubiti, id_giocatore, id_militanza)
                        			VALUES (goalSubiti, id_gio, id_mil);
                    			END IF;

                		ELSE
                    			RAISE EXCEPTION 'Lo sponsor inserito è già presente';
                		END IF;
            		ELSE
                		RAISE EXCEPTION 'La squadra inserita è già presente';
            		END IF;
        	ELSE
			-- Se la nazionalità è null, l'admin non ha inserito la squadra, ma ha trovato una squadra già esistente

			SELECT COUNT(id_giocatore) 
			INTO numGiocatori
    			FROM rosa
    			WHERE squadra = NEW.squadra
    			GROUP BY squadra, anno;

    			IF numGiocatori < 24 THEN

            			id_gio := genera_id('Calciatore', 'id_giocatore');

            			-- Inserisco calciatore

            			INSERT INTO Calciatore(nome, cognome, nazione, nascita, dataritiro, piedepr, id_giocatore)
            			VALUES (nomeC, cognomeC, nazioneC, dataNascitaC, dataRitiroC, piedePr, id_gio);

            			-- Inserisco ruolo

            			INSERT INTO Ruolo(ruolo, id_gio)
            			VALUES (ruolo, id_gio);

            			-- Genero un nuovo ID per la militanza

            			id_mil := genera_id('Militanza', 'id_militanza');

            			-- Inserisco militanza

            			INSERT INTO Militanza(inizio, fine, tirisegnati, partiteGiocate, squadra, giocatore, id_militanza)
            			VALUES (inizioMil, fineMil, tiriSegnati, partiteGiocate, nomeSquadra, id_gio, id_mil);

            			-- Inserisco goalSubiti se non è null

            			IF goalSubiti IS NOT NULL THEN

                			INSERT INTO Goalsubiti(goalSubiti, id_giocatore, id_militanza)
                			VALUES (goalSubiti, id_gio, id_mil);

            			END IF;
			ELSE
				RAISE EXCPETION 'La squadra inserita è piena'
			END IF;
        	END IF;
	ELSE
        	RAISE EXCEPTION 'Il calciatore è già presente';
    	END IF;
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE insert_militanza(
    id_giocatore varchar(20), 
    fineExMilitanza DATE, 
    inizioNuovaMilitanza DATE, 
    fineNuovaMilitanza DATE, 
    squadra varchar(100), 
    tiriSegnati INT, 
    partiteGiocate INT, 
    goalSubiti INT)
AS
DECLARE
	lastMil Militanza%ROWTYPE;
   	lastDate DATE;
    	numM INT;
    	id_mil varchar(20);
	numGiocatori INT;
BEGIN
	SELECT COUNT(id_giocatore) 
	INTO numGiocatori
    	FROM rosa
    	WHERE squadra = NEW.squadra
    	GROUP BY squadra, anno;

    	IF numGiocatori < 24 THEN

    		IF fineExMilitanza IS NOT NULL THEN

        		-- se non era stata impostata una data di fine militanza allora questo valore sarà diverso da null
        		-- prendo la militanza ancora in atto

        		SELECT *
        		INTO lastMil
        		FROM Militanza AS M
        		WHERE M.id_giocatore LIKE id_giocatore AND M.fine IS NULL;
		
			IF LOWER(lastMil.squadra) <> LOWER(squadra) THAN

        			IF fineExMilitanza > lastMil.inizio AND EXTRACT(MONTH FROM fineExMilitanza) IN (1, 7, 8, 9) THEN
            		
					-- mi assicuro che la fine della vecchia militanza sia valida e la inserisco

            				UPDATE Militanza AS M
            				SET M.fine = fineExMilitanza
            				WHERE M.id_giocatore LIKE id_giocatore AND M.fine IS NULL;

            				-- inserisco la nuova militanza senza controllare la validità poiché già stato fatto sull'applicativo
            		
					id_mil := genera_id('Militanza', 'id_militanza');

            				INSERT INTO Militanza(inizio, fine, id_giocatore, squadra, tirisegnati, partitegiocate, id_militanza)
            				VALUES (inizioNuovaMilitanza, fineNuovaMilitanza, id_giocatore, squadra, tiriSegnati, partiteGiocate, id_mil);

            				IF goalSubiti IS NOT NULL THEN
                				INSERT INTO goalSubiti(goalSubiti, id_giocatore, id_militanza)
                				VALUES (goalSubiti, id_giocatore, id_mil);
            				END IF;
        			ELSE
            				RAISE EXCEPTION 'Data fine vecchia Militanza non valida';
        			END IF;
			ELSE
				RAISE EXCEPTION 'Il giocatore si trova gia nella squadra';
			END IF;
    		ELSE
        		SELECT *
			INTO lastMil
   			FROM Militanza m
    			WHERE m.id_giocatore = p_id_giocatore AND m.fine = (SELECT MAX(fine)
        			      					    FROM Militanza
        			      					    WHERE id_giocatore = p_id_giocatore);
		
			IF LOWER(lastMil.squadra) <> LOWER(squadra) THAN

				IF inizioNuovaMilitanza > lastDate THEN      -- non faccio il controllo dei mesi perché già fatto sull'applicativo 

            				id_mil := genera_id('Militanza', 'id_militanza');

            				INSERT INTO Militanza(inizio, fine, id_giocatore, squadra, tirisegnati, partitegiocate, id_militanza)
            				VALUES (inizioNuovaMilitanza, fineNuovaMilitanza, id_giocatore, squadra, tiriSegnati, partiteGiocate, id_mil);

	    				IF goalSubiti IS NOT NULL THEN
                				INSERT INTO goalSubiti(goalSubiti, id_giocatore, id_militanza)
                				VALUES (goalSubiti, id_giocatore, id_mil);
            				END IF;
        			ELSE
            				RAISE EXCEPTION 'Data inizio Militanza non valida';
        			END IF;
			ELSE
				RAISE EXCEPTION 'Il giocatore si trova gia nella squadra';
			ENDIF;
    		END IF;
	ELSE 
		RAISE EXCEPTION 'La squadra è gia piena';
	END IF;
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION genera_id(tabella varchar(50), tupla varchar(50))
RETURNS varchar(20) AS $$
DECLARE
    query varchar;
    num INT;
    id varchar(20);
BEGIN
    query := 'SELECT COALESCE(MAX(CAST(SUBSTRING(' || tupla || ' FROM 5) AS INT)), 0) + 1 FROM ' || tabella;

    EXECUTE query INTO num;

    IF tabella ILIKE 'Militanza' THEN
        id := 'MIL' || LPAD(CAST(num AS VARCHAR), 10, '0');
    ELSIF tabella ILIKE 'Calciatore' THEN
        id := 'CALC' || LPAD(CAST(num AS VARCHAR), 10, '0');
    END IF;

    RETURN id;
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE insert_competizione_trofeoSquadra(
    nomeCompetizione varchar(100),
    annoInizio INT,
    nazionalita varchar(100),
    tipo varchar(100),
    nomeTrofeo varchar(100),
    annoFine INT)
AS
DECLARE
    	competizioneNaz competizioni_nazionali%ROWTYPE;
    	competizioneNonNaz competizioni_non_nazionali%ROWTYPE;
    	trofeoSquadra trofeo_squadra%ROWTYPE;
BEGIN
    	IF nazionalita IS NOT NULL THEN

        	-- se nazionalita non è null, allora vuol dire che è una competizione nazionale

        	SELECT * INTO competizioneNaz
        	FROM competizioni_nazionali AS c
        	WHERE LOWER(c.nome) LIKE LOWER(nomeCompetizione);

        	IF competizioneNaz IS NULL THEN

            		-- vuol dire che non esiste ancora una competizione con gli stessi dati

            		SELECT * INTO trofeoSquadra
            		FROM trofeo_squadra AS t
            		WHERE LOWER(t.nome) LIKE LOWER(nomeTrofeo);

            		IF trofeoSquadra IS NULL THEN

                		-- vuol dire che non esiste un trofeo con quel nome

                		INSERT INTO competizioni_nazionali(nome, nazione, anno, nomeTrofeo, annoVincita)
                		VALUES (nomeCompetizione, nazionalita, annoInizio, nomeTrofeo, annoFine);

                		INSERT INTO trofeo_squadra(nome, annovincita)
                		VALUES (nomeTrofeo, annoFine);
            		ELSE
                		RAISE EXCEPTION 'Un trofeo con questo nome esiste già';
            		END IF;
        	ELSE
            		RAISE EXCEPTION 'La competizione esiste già';
        	END IF;
    	ELSIF tipo IS NOT NULL THEN

        	-- se tipo non è null, vuol dire che è stata inserita una competizione non nazionale

        	SELECT * INTO competizioneNonNaz
        	FROM competizioni_non_nazionali AS c
        	WHERE LOWER(c.nome) LIKE LOWER(nomeCompetizione);

        	IF competizioneNonNaz IS NULL THEN

            		-- vuol dire che non esiste una competizione con questo nome

            		SELECT * INTO trofeoSquadra
            		FROM trofeo_squadra AS t
            		WHERE LOWER(t.nome) LIKE LOWER(nomeTrofeo);

            		IF trofeoSquadra IS NULL THEN

                		-- vuol dire che non esiste un trofeo con questo nome

                		INSERT INTO competizioni_non_nazionali(nome, tipo, anno, nomeTrofeo, annoVincita)
                		VALUES (nomeCompetizione, tipo, annoInizio, nomeTrofeo, annoFine);

                		INSERT INTO trofeo_squadra(nome, annovincita)
                		VALUES (nomeTrofeo, annoFine);
            		ELSE
                		RAISE EXCEPTION 'Il trofeo esiste già';
            		END IF;
        	ELSE
            		RAISE EXCEPTION 'La competizione esiste già';
        	END IF;
    	END IF;
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE insert_squadra_on_trofeoSquadra(
nazione varchar(100),
nomeCampionato varchar(100),
squadraVincitrice varchar(100))
AS
DECLARE
	compNaz campionati_nazionali%ROWTYPE;
	compNonNaz campionati_non_nazionali%ROWTYPE;
	trofeo trofeo_squadra%ROWTYPE;
BEGIN
	IF nazione IS NOT NULL THEN
		--significa che è un campionato nazionale
	
		SELECT *
		INTO compNaz
		FROM campionati_nazionali AS c
		WHERE c.nome ILIKE nomeCampionato AND c.nazione ILIKE nazione;

		UPDATE trofeo_squadra AS t
		SET t.squadra = squadraVincitrice
		WHERE t.nome ILIKE compNaz.nometrofeo AND t.squadra IS NULL;
	ELSE
		--significa che è un campionato non nazionale

		SELECT *
		INTO compNonNaz
		FROM campionati_non_nazionali AS c
		WHERE c.nome ILIKE nomeCampionato;

		UPDATE trofeo_squadra AS t
		SET t.squadra = squadraVincitrice
		WHERE t.nome ILIKE compNonNaz.nometrofeo AND t.squadra IS NULL;
	END IF;
END:
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
CREATE EXTENSION IF NOT EXISTS pg_cron;

-- Crea una funzione che sarà eseguita periodicamente 
CREATE OR REPLACE FUNCTION esegui_logica_ogni_6_mesi() 
RETURNS VOID AS $$ 
DECLARE
	dataCorrente date := NOW();
BEGIN   
	IF EXTRACT(MONTH FROM dataCorrente) = 12 THEN  			--inserimento invernale
		FOR squadra IN (SELECT nomesquadra FROM squadre) LOOP   --prendo tutte le squadre
			FOR militanza IN (SELECT * 			--e prendo tutte le militanze che non sono iniziate 
					  		  FROM militanza AS m 
					  		  WHERE (m.squadra = squadra) AND (fine IS NULL OR EXTRACT(YEAR FROM fine) > EXTRACT(YEAR FROM dataCorrente);  --manca il controllo per non prendere quelli che hanno iniziato la militanza d'estate
																				       --ma non lo faccio pochè dopo con l'if controllo se i giocatori con la militanza d'estate sono gia presenti nel db
							  LOOP
							  
							  IF NOT EXISTS(SELECT 1 
									FROM rosa AS r 
									WHERE r.id_giocatore = militanza.id_giocatore 
									AND r.squadra = squadra 
									AND r.anno = dataCorrente) THEN

							  	INSERT INTO rosa(id_giocatore, squadra, anno)
							  	VALUES (militanza.id_giocatore, squadra, dataCorrente);
							  
							  END IF;
			END LOOP;
		END LOOP;
		RAISE NOTICE 'Eseguito in sessione invernale: %', now(); 
	ELSE 
		FOR squadra IN (SELECT nomesquadra FROM squadre) LOOP
			FOR militanza IN (SELECT * 
					  		  FROM militanza AS m 
					  		  WHERE (m.squadra = squadra) AND (fine IS NULL OR EXTRACT(YEAR FROM fine) >= EXTRACT(YEAR FROM dataCorrente) 
															   			   AND EXTRACT(MONTH FROM fine) > 1);
							  LOOP
							  
							  IF NOT EXISTS(SELECT 1 
									FROM rosa AS r 
									WHERE r.id_giocatore = militanza.id_giocatore 
									AND r.squadra = squadra 
									AND r.anno = dataCorrente) THEN
								
							  	INSERT INTO rosa(id_giocatore, squadra, anno)
							  	VALUES (militanza.id_giocatore, squadra, dataCorrente);
							  
							  END IF;
			END LOOP;
		END LOOP;

		RAISE NOTICE 'Eseguito in sessione primaverile: %', now(); 
	END IF;
END; 
$$ LANGUAGE plpgsql;  

-- Pianifica l'esecuzione della funzione ogni 6 mesi 
SELECT cron.schedule('0 0 31 12,6 *', 'SELECT esegui_logica_ogni_6_mesi()');
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION controlla_utente()
RETURNS TRIGGER AS $$
BEGIN
    	IF NOT EXISTS (SELECT 1 FROM utente WHERE login = NEW.login) THEN
        	RETURN NEW;
    	ELSE
        	RAISE EXCEPTION 'Nome Utente già utilizzato';
    	END IF;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER insert_utente
BEFORE INSERT ON utente
FOR EACH ROW
EXECUTE FUNCTION controlla_utente();
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE insert_feature(
    nomeFeature VARCHAR(100)
)
AS $$ 
BEGIN
    	-- Controllo che non esista già una feature con questo nome
    	IF NOT EXISTS (SELECT 1
        	       FROM feature_caratteristiche
        	       WHERE tipologia ILIKE nomeFeature
    	) THEN
        	-- La feature non esiste, la inserisco
        	INSERT INTO feature_caratteristiche(tipologia)
        	VALUES (nomeFeature);
    	ELSE
        	RAISE EXCEPTION 'La feature esiste già';
    	END IF;
END $$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION prendi_solo_feature_disponibili(id_giocatore VARCHAR(20))
RETURNS VARCHAR(1000) AS $$
DECLARE
    	feature feature_caratteristiche%ROWTYPE;
    	stringaDiRitorno VARCHAR(1000) := '';  -- Inizializzo la stringa vuota
BEGIN
   	-- Scorro un for per creare una stringa di feature caratteristiche disponibili
    	FOR feature IN 	SELECT *
                   	FROM feature_caratteristiche
                   	WHERE tipologia NOT IN (SELECT tipo
                                          	FROM giocatore_possiede_feature_caratteristiche
                                          	WHERE giocatore = id_giocatore)
    	LOOP
        	-- Concateno il campo tipologia della feature alla stringa di ritorno
        	stringaDiRitorno := stringaDiRitorno || '_' || feature.tipologia;
    	END LOOP;

    	RETURN stringaDiRitorno;
END
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE insert_sponsor_secondari(
    nomeSponsor VARCHAR(100),
    finanziament INT,
    nomeSquadra VARCHAR(100)
)
AS $$ 
DECLARE
    sponsor_exists sponsor_secondari%ROWTYPE;
    sponsor_tec_exists sponsor_tec%ROWTYPE;
BEGIN
    -- Controllo che lo sponsor non sia già di un'altra squadra
    SELECT * INTO sponsor_exists
    FROM sponsor_secondari
    WHERE nome ILIKE nomeSponsor;

    IF sponsor_exists IS NULL THEN 
        -- Faccio lo stesso controllo ma per gli sponsorTec
        SELECT * INTO sponsor_tec_exists
        FROM sponsor_tec
        WHERE nome ILIKE nomeSponsor;

        IF sponsor_tec_exists IS NULL THEN
            -- A questo punto lo sponsor è valido e lo inserisco
            INSERT INTO sponsor_secondari(nome, squadra)
            VALUES (nomeSponsor, nomeSquadra);

	    IF finanziamento IS NOT NULL THEN
		
		UPDATE sponsor_secondari
		SET finanziamento = finanziament
		WHERE nome = nomeSponsor AND squadra = nomeSquadra;

	    END IF;
        ELSE
            RAISE EXCEPTION 'Lo sponsor è già sponsor tecnico di un altra squadra';    
        END IF;
    ELSE
        RAISE EXCEPTION 'Lo sponsor è già sponsor secondario di un altra squadra';
    END IF;
END $$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE insert_nuovo_trofeo(nomeTrofeo VARCHAR(100), anno INT)
AS $$
BEGIN
    	-- Controllo che non esista già un trofeo con questo nome
    	IF NOT EXISTS (SELECT * FROM trofeo_individuale WHERE nome ILIKE nomeTrofeo) THEN

        	INSERT INTO trofeo_individuale(nome, annoVincita)
        	VALUES (nomeTrofeo, anno);

    	ELSE
        	RAISE EXCEPTION 'Il trofeo esiste già';
    	END IF;
END
$$ LANGUAGE plpgsql;


CREATE OR REPLACE PROCEDURE insert_vincitore_in_trofeo_individuale(id_giocatore varchar(100), anno INT, trofeo varchar(100))
AS $$
DECLARE
	trofeo_ind trofeo_individuale%ROWTYPE;
BEGIN
	SELECT *
	INTO trofeo_ind
	FROM trofeo_individuale
	WHERE nome = trofeo AND annoVincita = anno;

	IF trofeo_ind IS NULL THEN
	
		UPDATE trofeo_individuale
		SET vincitore = id_giocatore
		WHERE nome = trofeo AND annoVincita = anno;
	
	ELSE
		RAISE EXCPETION 'Il vincitore è gia stato assegnato';
	END IF;
END
$$ LANGUAGE plpgsql;


SELECT cron.schedule('0 0 1 1 *', 'SELECT istanzia_trofeo_per_nuovo_anno()');

CREATE OR REPLACE FUNCTION istanzia_trofeo_per_nuovo_anno()
RETURNS VOID AS $$
DECLARE
    	trophy trofeo_individuale%ROWTYPE;
BEGIN
    	-- Creo di nuovo tutti i trofei per l'anno nuovo
    	FOR trophy IN 	SELECT DISTINCT nome, MAX(annoVincita) + 1 AS nuovo_anno, vincitore
        		FROM trofeo_individuale
                  	GROUP BY nome, vincitore
    	LOOP
        	-- Controllo se è stato assegnato oppure deve ancora essere assegnato
        	IF trophy.vincitore IS NOT NULL THEN
            	
		INSERT INTO trofeo_individuale(nome, annoVincita)
            	VALUES(trophy.nome, trophy.nuovo_anno);
        	
		


END IF;
    	END LOOP;
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE elimina_giocatore(
    id_giocatore VARCHAR(20)
)
AS $$ 
BEGIN
    -- Elimino da goalSubiti
    DELETE FROM goalSubiti AS g
    WHERE g.id_giocatore = id_giocatore;

    -- Elimino tutte le militanze dove è presente quel giocatore
    DELETE FROM Militanza AS m
    WHERE m.giocatore = id_giocatore;

    -- Elimino da ruoli
    DELETE FROM Ruolo AS r
    WHERE r.id_giocatore = id_giocatore;

    -- Elimino da rosa
    DELETE FROM Rosa AS r
    WHERE r.id_giocatore = id_giocatore;

    -- Elimino da trofeo_squadra_calciatore
    DELETE FROM trofeo_squadra_calciatore AS t
    WHERE t.calciatore = id_giocatore;

    -- Elimino da calciatore_possiede_feature_caratteristiche
    DELETE FROM calciatore_possiede_feature_caratteristiche AS c
    WHERE c.giocatore = id_giocatore;

    -- Elimino da trofeo individuale
    DELETE FROM trofeo_individuale 
    WHERE vincitore = id_giocatore;
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION inserisci_in_rosa()
RETURNS TRIGGER AS $$
DECLARE
    data DATE;
BEGIN
	--arrotondo data
	IF EXTRACT(MONTH FROM NEW.inizio) IN (7, 8, 9) THEN
        	data := DATE_TRUNC('YEAR', NEW.inizio) + INTERVAL '1 YEAR' - INTERVAL '1 DAY';
    	ELSE
        	data := DATE_TRUNC('YEAR', NEW.inizio) + INTERVAL '6 MONTHS' - INTERVAL '1 DAY';
    	END IF;

	--se siamo nel presente inserisco solo nella rosa attuale perche il resto verra fatto dalla funzione di manutenzione della rosa automatico
	IF EXTRACT(YEAR FROM NEW.inizio) >= EXTRACT(YEAR FROM NOW()) THEN	

    		INSERT INTO rosa(id_giocatore, squadra, anno)
    		VALUES (NEW.id_giocatore, NEW.squadra, data);

    		RETURN NEW;
	
	ELSE	--se invece l'inserimento inizia prima del presente allora inserisco dentro la rosa per ogni intervallo fino ad arrivare al presente in cui verra poi continuato dalla manutenzione


		WHILE EXTRACT(YEAR FROM data) < EXTRACT(YEAR FROM NOW()) LOOP
			
			IF EXTRACT(MONTH FROM data) = 6 THEN
				
				INSERT INTO rosa(id_giocatore, squadra, anno)
    				VALUES (NEW.id_giocatore, NEW.squadra, data);
			
				data := DATE_TRUNC('YEAR', data) + INTERVAL '1 YEAR' - INTERVAL '1 DAY';
			ELSE 
			
				INSERT INTO rosa(id_giocatore, squadra, anno)
    				VALUES (NEW.id_giocatore, NEW.squadra, data);

				data := DATE_TRUNC('YEAR', data + INTERVAL '1 YEAR') + INTERVAL '6 MONTHS' - INTERVAL '1 DAY';
			END IF;
			
		END LOOP;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER inserimentoRosa
AFTER INSERT ON Militanza
FOR EACH ROW
EXECUTE FUNCTION inserisci_in_rosa();
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION visualizzaCalcSquad(valore VARCHAR(30))
RETURN giocatore%ROWTYPE AS $$
DECLARE
    string_sql VARCHAR(50) := 'SELECT * FROM GIOCATORE WHERE nome = ';
    instr_sql VARCHAR(80) := '';
BEGIN
    instr_sql := instr_sql || string_sql || valore || ';';

    EXECUTE IMMEDIATE (instr_sql);
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION visualizzaCalcSquad(valore VARCHAR(30))
RETURN squadre%ROWTYPE AS $$
DECLARE
    string_sql VARCHAR(50) := 'SELECT * FROM SQUADRE WHERE nomeSquadra = ';
    instr_sql VARCHAR(80) := '';
BEGIN
    instr_sql := instr_sql || string_sql || valore || ';';

    EXECUTE IMMEDIATE (instr_sql);
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------								 
CREATE OR REPLACE FUNCTION visualizzaCalcSquad(valore VARCHAR(30))
RETURN giocatore%ROWTYPE AS $$
DECLARE
    string_sql VARCHAR(50) := 'SELECT * FROM GIOCATORE WHERE piedePR = ';
    instr_sql VARCHAR(80) := '';
BEGIN
    instr_sql := instr_sql || string_sql || valore || ';';

    EXECUTE IMMEDIATE (instr_sql);
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------								 
CREATE OR REPLACE FUNCTION visualizzaCalcSquad(valore VARCHAR(30))
RETURN giocatore%ROWTYPE AS $$
DECLARE
    string_sql VARCHAR(50) := 'SELECT * FROM GIOCATORE WHERE EXTRACT(YEAR FROM AGE(current_date, nascita)) = ';
    instr_sql VARCHAR(80) := '';
BEGIN
    instr_sql := instr_sql || string_sql || valore || ';';

    EXECUTE IMMEDIATE (instr_sql);
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
