----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION verification(login IN VARCHAR(50), pass IN VARCHAR(50)) 
RETURNS INT AS $verification$
DECLARE
    priority_found INT;
BEGIN
    SELECT priority INTO priority_found
    FROM UTENTE
    WHERE UTENTE.login = verification.login AND UTENTE.password = verification.pass;

    IF FOUND THEN
        RETURN priority_found;
    ELSE
        RETURN -1; -- Utente non trovato
    END IF;
END;
$$
LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION convRuolo(ruoli IN VARCHAR(100)) 
RETURN VARCHAR(20) AS $convRuolo$
DECLARE
	pos INT;
	ruolo VARCHAR(20);
BEGIN
	pos := INSTR(ruoli, '_', 1);
	
	IF pos > 0 THEN
		ruolo := SUBSTR (ruoli, 1, pos - 1);
	ELSE
		ruolo := ruoli;
	END IF;
	
	RETURN ruolo;
END; 
$$
LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE TRIGGER checkPortiere AS
BEFORE INSERT OR UPDATE OF goalSubiti ON goalsubiti
FOR EACH ROW
DECLARE
	ruolo VARCHAR(20);
BEGIN
	ruolo := convRuolo(SELECT R.ruolo FROM RUOLO AS R, CALCIATORE AS C WHERE R.id_giocatore = C.id_giocatore AND C.id_giocatore = NEW.id_giocatore);
	IF ruolo <> 'portiere' THEN
		RAISE EXCEPTION('Il giocatore che stai inserendo non è portiere.');
	END IF;
END;
----------------------------------------------------------------------------------------------------------------
CREATE TRIGGER inserimentoRosa
AFTER INSERT ON Militanza
FOR EACH ROW
BEGIN
	INSERT INTO rosa (anno, id_giocatore, squadra)
	VALUES (NEW.inizio, NEW.id_giocatore, NEW.squadra);
END;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION controllaNumGiocatoriFunction() RETURNS TRIGGER AS $$
DECLARE
    numGiocatori INT;
BEGIN
    SELECT COUNT(id_giocatore) INTO numGiocatori
    FROM rosa
    WHERE squadra = NEW.squadra
    GROUP BY squadra, anno;

    IF numGiocatori < 16 THEN
        RAISE EXCEPTION 'La squadra ha troppi pochi giocatori per partecipare alla competizione.';
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
CREATE TRIGGER controllaNumGiocatori
BEFORE INSERT ON squadra_gioca_in_competizioni_nazionali
FOR EACH ROW
EXECUTE FUNCTION controllaNumGiocatoriFunction();
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE inserisci_Calciatore_Ruolo_Sponsor_Squadra_Militanza(
    nomeC VARCHAR(100), 
    cognomeC VARCHAR(100), 
    nazioneC VARCHAR(100), 
    dataNascitaC DATE, 
    dataRitiroC VARCHAR(100), 
    piedePr VARCHAR(20),
    ruolo VARCHAR(200),
    sponsorNome VARCHAR(100),
    nomeSquadra VARCHAR(100), 
    nazionalita VARCHAR(100),
    inizioMil VARCHAR(20), 
    fineMil VARCHAR(20), 
    tiriSegnati INT, 
    partiteGiocate INT, 
    goalSubiti INT)
AS $$
DECLARE
    id_gio VARCHAR(20);
    numC INT;
    id_mil VARCHAR(20);
    numM INT;
    michele Calciatore%ROWTYPE;
    micheleSquad Squadre%ROWTYPE;
    alfredoSponsor Squadra%ROWTYPE;
    numGiocatori INT;
BEGIN
    	-- Controllo se esiste già il calciatore
	SELECT *
    	INTO michele
    	FROM Calciatore AS c
    	WHERE c.nome ILIKE nomeC AND c.Cognome ILIKE cognomeC AND c.Nazione ILIKE nazioneC AND c.nascita = dataNascitaC;

    	IF michele IS NULL THEN

        	-- Non esiste il calciatore, passo al prossimo controllo
        
        	IF nazionalita IS NOT NULL THEN

            		-- Se la nazionalità non è null, vuol dire che la squadra è stata inserita dall'admin

            		SELECT *
            		INTO micheleSquad
            		FROM Squadre AS s
            		WHERE s.nomeSquarda ILIKE nomeSquadra;

            		IF micheleSquad IS NULL THEN

                		-- Controllo lo sponsor inserito

                		SELECT *  
                		INTO alfredoSponsor
                		FROM Squadra AS s
                		WHERE s.nomeSponsor ILIKE sponsorNome;

                		IF alfredoSponsor IS NULL THEN

                    			-- Genero un nuovo ID per il calciatore

                    			id_gio := genera_id('Calciatore', 'id_giocatore');

                    			-- Inserisco calciatore

                    			INSERT INTO Calciatore(nome, cognome, nazione, nascita, dataritiro, piedepr, id_giocatore)
                    			VALUES (nomeC, cognomeC, nazioneC, dataNascitaC, dataRitiroC, piedePr, id_gio);

                    			-- Inserisco ruolo

                    			INSERT INTO Ruolo(ruolo, id_giocatore)
                    			VALUES (ruolo, id_gio);

                   			-- Inserisco sponsor

                    			INSERT INTO SponsorTec(nome)
                    			VALUES (nomeSponsor);

                    			-- Inserisco squadra

                    			INSERT INTO Squadre(nomeSquadra, nazionalita, nomeSponsor)
                   			VALUES (nomeSquadra, nazionalita, nomeSponsor);

                    			-- Genero un nuovo ID per la militanza

                    			id_mil := genera_id('Militanza', 'id_militanza');

                    			-- Inserisco militanza

                    			INSERT INTO Militanza(inizio, fine, tirisegnati, partiteGiocate, squadra, giocatore, id_militanza)
                    			VALUES (inizioMil, fineMil, tiriSegnati, partiteGiocate, nomeSquadra, id_gio, id_mil);

                   			-- Inserisco goalSubiti se non è null

                    			IF goalSubiti IS NOT NULL THEN
                        			INSERT INTO Goalsubiti(goalSubiti, id_giocatore, id_militanza)
                        			VALUES (goalSubiti, id_gio, id_mil);
                    			END IF;

                		ELSE
                    			RAISE EXCEPTION 'Lo sponsor inserito è già presente';
                		END IF;
            		ELSE
                		RAISE EXCEPTION 'La squadra inserita è già presente';
            		END IF;
        	ELSE
			-- Se la nazionalità è null, l'admin non ha inserito la squadra, ma ha trovato una squadra già esistente

			SELECT COUNT(id_giocatore) 
			INTO numGiocatori
    			FROM rosa
    			WHERE squadra = NEW.squadra
    			GROUP BY squadra, anno;

    			IF numGiocatori < 24 THEN

            			id_gio := genera_id('Calciatore', 'id_giocatore');

            			-- Inserisco calciatore

            			INSERT INTO Calciatore(nome, cognome, nazione, nascita, dataritiro, piedepr, id_giocatore)
            			VALUES (nomeC, cognomeC, nazioneC, dataNascitaC, dataRitiroC, piedePr, id_gio);

            			-- Inserisco ruolo

            			INSERT INTO Ruolo(ruolo, id_gio)
            			VALUES (ruolo, id_gio);

            			-- Genero un nuovo ID per la militanza

            			id_mil := genera_id('Militanza', 'id_militanza');

            			-- Inserisco militanza

            			INSERT INTO Militanza(inizio, fine, tirisegnati, partiteGiocate, squadra, giocatore, id_militanza)
            			VALUES (inizioMil, fineMil, tiriSegnati, partiteGiocate, nomeSquadra, id_gio, id_mil);

            			-- Inserisco goalSubiti se non è null

            			IF goalSubiti IS NOT NULL THEN

                			INSERT INTO Goalsubiti(goalSubiti, id_giocatore, id_militanza)
                			VALUES (goalSubiti, id_gio, id_mil);

            			END IF;
			ELSE
				RAISE EXCPETION 'La squadra inserita è piena'
			END IF;
        	END IF;
	ELSE
        	RAISE EXCEPTION 'Il calciatore è già presente';
    	END IF;
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE insert_militanza(
    id_giocatore varchar(20), 
    fineExMilitanza DATE, 
    inizioNuovaMilitanza DATE, 
    fineNuovaMilitanza DATE, 
    squadra varchar(100), 
    tiriSegnati INT, 
    partiteGiocate INT, 
    goalSubiti INT)
AS
DECLARE
	lastMil Militanza%ROWTYPE;
   	lastDate DATE;
    	numM INT;
    	id_mil varchar(20);
	numGiocatori INT;
BEGIN
	SELECT COUNT(id_giocatore) 
	INTO numGiocatori
    	FROM rosa
    	WHERE squadra = NEW.squadra
    	GROUP BY squadra, anno;

    	IF numGiocatori < 24 THEN

    		IF fineExMilitanza IS NOT NULL THEN

        		-- se non era stata impostata una data di fine militanza allora questo valore sarà diverso da null
        		-- prendo la militanza ancora in atto

        		SELECT *
        		INTO lastMil
        		FROM Militanza AS M
        		WHERE M.id_giocatore LIKE id_giocatore AND M.fine IS NULL;
		
			IF LOWER(lastMil.squadra) <> LOWER(squadra) THAN

        			IF fineExMilitanza > lastMil.inizio AND EXTRACT(MONTH FROM fineExMilitanza) IN (1, 7, 8, 9) THEN
            		
					-- mi assicuro che la fine della vecchia militanza sia valida e la inserisco

            				UPDATE Militanza AS M
            				SET M.fine = fineExMilitanza
            				WHERE M.id_giocatore LIKE id_giocatore AND M.fine IS NULL;

            				-- inserisco la nuova militanza senza controllare la validità poiché già stato fatto sull'applicativo
            		
					id_mil := genera_id('Militanza', 'id_militanza');

            				INSERT INTO Militanza(inizio, fine, id_giocatore, squadra, tirisegnati, partitegiocate, id_militanza)
            				VALUES (inizioNuovaMilitanza, fineNuovaMilitanza, id_giocatore, squadra, tiriSegnati, partiteGiocate, id_mil);

            				IF goalSubiti IS NOT NULL THEN
                				INSERT INTO goalSubiti(goalSubiti, id_giocatore, id_militanza)
                				VALUES (goalSubiti, id_giocatore, id_mil);
            				END IF;
        			ELSE
            				RAISE EXCEPTION 'Data fine vecchia Militanza non valida';
        			END IF;
			ELSE
				RAISE EXCEPTION 'Il giocatore si trova gia nella squadra';
			END IF;
    		ELSE
        		SELECT *
			INTO lastMil
   			FROM Militanza m
    			WHERE m.id_giocatore = p_id_giocatore AND m.fine = (SELECT MAX(fine)
        			      					    FROM Militanza
        			      					    WHERE id_giocatore = p_id_giocatore);
		
			IF LOWER(lastMil.squadra) <> LOWER(squadra) THAN

				IF inizioNuovaMilitanza > lastDate THEN      -- non faccio il controllo dei mesi perché già fatto sull'applicativo 

            				id_mil := genera_id('Militanza', 'id_militanza');

            				INSERT INTO Militanza(inizio, fine, id_giocatore, squadra, tirisegnati, partitegiocate, id_militanza)
            				VALUES (inizioNuovaMilitanza, fineNuovaMilitanza, id_giocatore, squadra, tiriSegnati, partiteGiocate, id_mil);

	    				IF goalSubiti IS NOT NULL THEN
                				INSERT INTO goalSubiti(goalSubiti, id_giocatore, id_militanza)
                				VALUES (goalSubiti, id_giocatore, id_mil);
            				END IF;
        			ELSE
            				RAISE EXCEPTION 'Data inizio Militanza non valida';
        			END IF;
			ELSE
				RAISE EXCEPTION 'Il giocatore si trova gia nella squadra';
			ENDIF;
    		END IF;
	ELSE 
		RAISE EXCEPTION 'La squadra è gia piena';
	END IF;
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION genera_id(tabella varchar(50), tupla varchar(50))
RETURNS varchar(20) AS $$
DECLARE
    query varchar;
    num INT;
    id varchar(20);
BEGIN
    query := 'SELECT COALESCE(MAX(CAST(SUBSTRING(' || tupla || ' FROM 5) AS INT)), 0) + 1 FROM ' || tabella;

    EXECUTE query INTO num;

    IF tabella ILIKE 'Militanza' THEN
        id := 'MIL' || LPAD(CAST(num AS VARCHAR), 10, '0');
    ELSIF tabella ILIKE 'Calciatore' THEN
        id := 'CALC' || LPAD(CAST(num AS VARCHAR), 10, '0');
    END IF;

    RETURN id;
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE insert_competizione_trofeoSquadra(
    nomeCompetizione varchar(100),
    annoInizio INT,
    nazionalita varchar(100),
    tipo varchar(100),
    nomeTrofeo varchar(100),
    annoFine INT)
AS
DECLARE
    	competizioneNaz competizioni_nazionali%ROWTYPE;
    	competizioneNonNaz competizioni_non_nazionali%ROWTYPE;
    	trofeoSquadra trofeo_squadra%ROWTYPE;
BEGIN
    	IF nazionalita IS NOT NULL THEN

        	-- se nazionalita non è null, allora vuol dire che è una competizione nazionale

        	SELECT * INTO competizioneNaz
        	FROM competizioni_nazionali AS c
        	WHERE LOWER(c.nome) LIKE LOWER(nomeCompetizione);

        	IF competizioneNaz IS NULL THEN

            		-- vuol dire che non esiste ancora una competizione con gli stessi dati

            		SELECT * INTO trofeoSquadra
            		FROM trofeo_squadra AS t
            		WHERE LOWER(t.nome) LIKE LOWER(nomeTrofeo);

            		IF trofeoSquadra IS NULL THEN

                		-- vuol dire che non esiste un trofeo con quel nome

                		INSERT INTO competizioni_nazionali(nome, nazione, anno, nomeTrofeo, annoVincita)
                		VALUES (nomeCompetizione, nazionalita, annoInizio, nomeTrofeo, annoFine);

                		INSERT INTO trofeo_squadra(nome, annovincita)
                		VALUES (nomeTrofeo, annoFine);
            		ELSE
                		RAISE EXCEPTION 'Un trofeo con questo nome esiste già';
            		END IF;
        	ELSE
            		RAISE EXCEPTION 'La competizione esiste già';
        	END IF;
    	ELSIF tipo IS NOT NULL THEN

        	-- se tipo non è null, vuol dire che è stata inserita una competizione non nazionale

        	SELECT * INTO competizioneNonNaz
        	FROM competizioni_non_nazionali AS c
        	WHERE LOWER(c.nome) LIKE LOWER(nomeCompetizione);

        	IF competizioneNonNaz IS NULL THEN

            		-- vuol dire che non esiste una competizione con questo nome

            		SELECT * INTO trofeoSquadra
            		FROM trofeo_squadra AS t
            		WHERE LOWER(t.nome) LIKE LOWER(nomeTrofeo);

            		IF trofeoSquadra IS NULL THEN

                		-- vuol dire che non esiste un trofeo con questo nome

                		INSERT INTO competizioni_non_nazionali(nome, tipo, anno, nomeTrofeo, annoVincita)
                		VALUES (nomeCompetizione, tipo, annoInizio, nomeTrofeo, annoFine);

                		INSERT INTO trofeo_squadra(nome, annovincita)
                		VALUES (nomeTrofeo, annoFine);
            		ELSE
                		RAISE EXCEPTION 'Il trofeo esiste già';
            		END IF;
        	ELSE
            		RAISE EXCEPTION 'La competizione esiste già';
        	END IF;
    	END IF;
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE insert_squadra_on_trofeoSquadra(
nazione varchar(100),
nomeCampionato varchar(100),
squadraVincitrice varchar(100))
AS
DECLARE
	compNaz campionati_nazionali%ROWTYPE;
	compNonNaz campionati_non_nazionali%ROWTYPE;
	trofeo trofeo_squadra%ROWTYPE;
BEGIN
	IF nazione IS NOT NULL THEN
		--significa che è un campionato nazionale
	
		SELECT *
		INTO compNaz
		FROM campionati_nazionali AS c
		WHERE c.nome ILIKE nomeCampionato AND c.nazione ILIKE nazione;

		UPDATE trofeo_squadra AS t
		SET t.squadra = squadraVincitrice
		WHERE t.nome ILIKE compNaz.nometrofeo AND t.squadra IS NULL;
	ELSE
		--significa che è un campionato non nazionale

		SELECT *
		INTO compNonNaz
		FROM campionati_non_nazionali AS c
		WHERE c.nome ILIKE nomeCampionato;

		UPDATE trofeo_squadra AS t
		SET t.squadra = squadraVincitrice
		WHERE t.nome ILIKE compNonNaz.nometrofeo AND t.squadra IS NULL;
	END IF;
END:
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
CREATE EXTENSION IF NOT EXISTS pg_cron;

-- Crea una funzione che sarà eseguita periodicamente 
CREATE OR REPLACE FUNCTION esegui_logica_ogni_6_mesi() 
RETURNS VOID AS $$ 
	dataCorrente date := NOW();
BEGIN   
	IF EXTRACT(MONTH FROM dataCorrente) = 12 THEN  
		FOR squadra IN (SELECT nomesquadra FROM squadre) LOOP
			FOR militanza IN (SELECT * 
					  		  FROM militanza AS m 
					  		  WHERE (m.squadra = squadra) AND (fine IS NULL OR EXTRACT(YEAR FROM fine) > EXTRACT(YEAR FROM dataCorrente));
							  LOOP
							  
							  INSERT INTO rosa(id_giocatore, squadra, anno)
							  VALUES (militanza.id_giocatore, squadra, dataCorrente);
							  
							  RAISE NOTICE 'Eseguito in sessione invernale: %', now(); 
			END LOOP;
		END LOOP;
	ELSE 
		FOR squadra IN (SELECT nomesquadra FROM squadre) LOOP
			FOR militanza IN (SELECT * 
					  		  FROM militanza AS m 
					  		  WHERE (m.squadra = squadra) AND (fine IS NULL OR EXTRACT(YEAR FROM fine) >= EXTRACT(YEAR FROM dataCorrente) 
															   			   AND EXTRACT(MONTH FROM fine) > '1');
							  LOOP
							  
							  INSERT INTO rosa(id_giocatore, squadra, anno)
							  VALUES (militanza.id_giocatore, squadra, dataCorrente);
							  
							  RAISE NOTICE 'Eseguito in sessione primaverile: %', now();  
			END LOOP;
		END LOOP;
END; 
$$ LANGUAGE plpgsql;  

-- Pianifica l'esecuzione della funzione ogni 6 mesi 
SELECT cron.schedule('0 0 31 12,6 *', 'SELECT esegui_logica_ogni_6_mesi()');
----------------------------------------------------------------------------------------------------------------
													 
