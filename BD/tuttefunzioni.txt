CREATE OR REPLACE FUNCTION verification(login IN VARCHAR(50), pass IN VARCHAR(50)) 
RETURNS INT AS $$
DECLARE
    priority_found INT;
BEGIN
    SELECT priority INTO priority_found
    FROM UTENTE
    WHERE UTENTE.login = verification.login AND UTENTE.password = verification.pass;

    IF FOUND THEN
        RETURN priority_found;
    ELSE
        RETURN -1; -- Utente non trovato
    END IF;
END;
$$
LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION convRuolo(ruoli IN VARCHAR(100))
RETURNS VARCHAR(20) AS $$
DECLARE
	pos INT;
	ruolo VARCHAR(20);
BEGIN
	pos := POSITION('_' IN ruoli);

	IF pos > 0 THEN
		ruolo := SUBSTRING(ruoli FROM 1 FOR pos - 1);
	ELSE
		ruolo := ruoli;
	END IF;

	RETURN ruolo;
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION checkPortiere()
RETURNS TRIGGER AS $$
DECLARE
	ruolo VARCHAR(20);
BEGIN
	ruolo := convRuolo((SELECT R.ruolo FROM RUOLO AS R, CALCIATORE AS C WHERE R.id_giocatore = C.id_giocatore AND C.id_giocatore = NEW.id_giocatore));

	IF ruolo <> 'portiere' THEN
		RAISE EXCEPTION 'Il giocatore che stai inserendo non è portiere.';
	END IF;

	RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trigger_checkPortiere
BEFORE INSERT OR UPDATE OF goalSubiti ON goalsubiti
FOR EACH ROW
EXECUTE FUNCTION checkPortiere();
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION visualizzaCalc(valore VARCHAR(30), ordine BOOLEAN)
RETURNS SETOF calciatore AS $$
DECLARE
    giocatore_row calciatore%ROWTYPE;
    query_sql VARCHAR(200);
BEGIN
    -- Costruisci la query di base
    query_sql := 'SELECT * FROM CALCIATORE WHERE nome = $1';

    -- Aggiungi la clausola ORDER BY se richiesto
    IF ordine THEN
        query_sql := query_sql || ' ORDER BY cognome';
    END IF;

    -- Esegui la query parametrica
    FOR giocatore_row IN EXECUTE query_sql USING valore
    LOOP
        -- Restituisci ogni tupla risultante
        RETURN NEXT giocatore_row;
    END LOOP;

    -- Restituisci tutte le tuple
    RETURN;
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION visualizzaSquadra(valore VARCHAR(30))
RETURNS RECORD AS $$
DECLARE
    squadra_row squadre%ROWTYPE;
    string_sql VARCHAR(200);
BEGIN
    string_sql := 'SELECT * FROM SQUADRE WHERE nomeSquadra = $1';

    -- Utilizza EXECUTE per eseguire la query parametrica
    EXECUTE string_sql INTO squadra_row USING valore;

    -- Restituisci la tupla risultante
    RETURN squadra_row;
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------								 
CREATE OR REPLACE FUNCTION visualizzaPerPiedePR(valore VARCHAR(30))
RETURNS SETOF calciatore AS $$
DECLARE
    giocatore_row calciatore%ROWTYPE;
    string_sql VARCHAR(200);
BEGIN
    string_sql := 'SELECT * FROM CALCIATORE WHERE piedePR = $1';

    -- Utilizza EXECUTE per eseguire la query parametrica
    FOR giocatore_row IN EXECUTE string_sql USING valore
    LOOP
        -- Restituisci la tupla risultante
        RETURN NEXT giocatore_row;
    END LOOP;

	-- Restituisce tutte le tuple
	RETURN;
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------								 
CREATE OR REPLACE FUNCTION visualizzaPerEta(valore VARCHAR(30))
RETURNS SETOF calciatore AS $$
DECLARE
    giocatore_row calciatore%ROWTYPE;
    string_sql VARCHAR(200);
BEGIN
    string_sql := 'SELECT * FROM CALCIATORE WHERE EXTRACT(YEAR FROM AGE(current_date, nascita)) = $1';

    -- Utilizza EXECUTE per eseguire la query parametrica
    FOR giocatore_row IN EXECUTE string_sql USING valore
    LOOP
        -- Restituisci la tupla risultante
        RETURN NEXT giocatore_row;
    END LOOP;

	-- Restituisce tutte le tuple
	RETURN;
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------								 
CREATE OR REPLACE FUNCTION ricercaPerRuolo(ruoli IN VARCHAR(100)) 
RETURNS VARCHAR(1000000) AS $$
DECLARE
    giocatore_record RECORD;
	ruoloR VARCHAR(50);
    return_value VARCHAR(1000000) := '';
BEGIN
    FOR giocatore_record IN 
        SELECT 
            C.nome,
            C.cognome,
            C.nascita,
            C.piedePR,
            C.nanzionalita,
            C.ruolo
        FROM CALCIATORE AS C
        JOIN RUOLO AS R ON C.Id_Giocatore = R.Id_Giocatore
    LOOP
        -- Utilizza UNNEST per ottenere ciascuna parte del ruolo e con string_to_array suddividiamo la stringa di ruoli ogni volta che trova un '_'
        FOR ruoloR IN SELECT UNNEST(string_to_array(giocatore_record.ruolo, '_'))
        LOOP
            -- Concatena le informazioni se il ruolo corrisponde
            IF ruoloR = ruoli THEN
                return_value := return_value || giocatore_record.nome || '_' || giocatore_record.cognome || '_' || giocatore_record.nascita || '_' || giocatore_record.piedePR || '_' || giocatore_record.nanzionalita || '_' || giocatore_record.ruolo || ',';
                EXIT; -- Esci dal loop interno se il ruolo corrisponde
            END IF;
        END LOOP;
    END LOOP;

    RETURN return_value;
END; 
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION ricercaPerGoalSubiti(goal INT)
RETURNS SETOF RECORD AS $$
DECLARE
	giocatore_info RECORD;
BEGIN
    FOR giocatore_info IN
        SELECT 
            C.nome,
            C.cognome,
            C.nascita,
            C.piedepr,
            C.nanzionalita,
            C.ruolo,
            S.goalSubiti
        FROM CALCIATORE AS C
        JOIN GOALSBITI AS S ON C.Id_Giocatore = S.Id_Giocatore
        WHERE S.GoalSubiti = $1
    LOOP
        RETURN NEXT giocatore_info;
    END LOOP;
    
    RETURN;
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION ricercaPerGoalSegnati(goal INT)
RETURNS SETOF RECORD AS $$
DECLARE
	giocatore_info RECORD;
BEGIN
    FOR giocatore_info IN
        SELECT 
            C.nome,
            C.cognome,
            C.nascita,
            C.piedepr,
            C.nanzionalita,
            C.ruolo,
            M.TiriSegnati
        FROM CALCIATORE AS C
        JOIN MILITANZA AS M ON C.Id_Giocatore = M.Id_Giocatore
        WHERE M.TiriSegnati = $1
    LOOP
        RETURN NEXT giocatore_info;
    END LOOP;
    
    RETURN;
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE inserisci_Calciatore_Ruolo_Sponsor_Squadra_Militanza(
    nomeC VARCHAR(100), 
    cognomeC VARCHAR(100), 
    nazioneC VARCHAR(100), 
    dataNascitaC DATE, 
    dataRitiroC DATE, 
    piedePr VARCHAR(20),
    ruolo VARCHAR(200),
    sponsorNome VARCHAR(100),
    nomeSquadra VARCHAR(100), 
    nazionalita VARCHAR(100),
    inizioMil DATE, 
    fineMil DATE, 
    tiriSegnati INT, 
    partiteGiocate INT, 
    goalSubiti INT)
AS $$
DECLARE
    id_gio VARCHAR(20);
    id_mil VARCHAR(20);
BEGIN
    	-- Controllo se esiste già il calciatore
    	IF NOT EXISTS (SELECT 1
    				   FROM Calciatore
    				   WHERE nome ILIKE nomeC AND Cognome ILIKE cognomeC AND nazionalita ILIKE nazioneC AND nascita = dataNascitaC) 
			THEN
        	-- Non esiste il calciatore, passo al prossimo controllo       
        	IF nazionalita IS NOT NULL THEN

            		-- Se la nazionalità non è null, vuol dire che la squadra è stata inserita dall'admin
            		IF NOT EXISTS(SELECT 1   		
            					  FROM Squadre AS s
            					  WHERE s.nomeSquarda ILIKE nomeSquadra) 
						THEN
                		-- Controllo lo sponsor inserito
                		IF NOT EXISTS(SELECT 1 
                					  FROM Squadra
                					  WHERE nomeSponsor ILIKE sponsorNome) THEN

                    			-- Genero un nuovo ID per il calciatore
                    			id_gio := genera_id('Calciatore', 'id_giocatore');

                    			-- Inserisco calciatore
                    			INSERT INTO Calciatore(nome, cognome, nazione, nascita, dataritiro, piedepr, id_giocatore)
                    			VALUES (nomeC, cognomeC, nazioneC, dataNascitaC, dataRitiroC, piedePr, id_gio);

                    			-- Inserisco ruolo
                    			INSERT INTO Ruolo(ruolo, id_giocatore)
                    			VALUES (ruolo, id_gio);

                   				-- Inserisco sponsor
                    			INSERT INTO SponsorTec(nome)
                    			VALUES (nomeSponsor);

                    			-- Inserisco squadra
                    			INSERT INTO Squadre(nomeSquadra, nazionalita, nomeSponsor)
                   				VALUES (nomeSquadra, nazionalita, nomeSponsor);

                    			-- Genero un nuovo ID per la militanza
                    			id_mil := genera_id('Militanza', 'id_militanza');

                    			-- Inserisco militanza
                    			INSERT INTO Militanza(inizio, fine, tirisegnati, partiteGiocate, squadra, giocatore, id_militanza)
                    			VALUES (inizioMil, fineMil, tiriSegnati, partiteGiocate, nomeSquadra, id_gio, id_mil);
                   				
								-- Inserisco goalSubiti se non è null
                    			IF goalSubiti IS NOT NULL THEN
                        			INSERT INTO Goalsubiti(goalSubiti, id_giocatore, id_militanza)
                        			VALUES (goalSubiti, id_gio, id_mil);
                    			END IF;
                		ELSE
                    			RAISE EXCEPTION 'Lo sponsor inserito è già presente';
                		END IF;
            		ELSE
                		RAISE EXCEPTION 'La squadra inserita è già presente';
            		END IF;
        	ELSE
			-- Se la nazionalità è null, l'admin non ha inserito la squadra, ma ha trovato una squadra già esistente

            		id_gio := genera_id('Calciatore', 'id_giocatore');

            		-- Inserisco calciatore
            		INSERT INTO Calciatore(nome, cognome, nazione, nascita, dataritiro, piedepr, id_giocatore)
            		VALUES (nomeC, cognomeC, nazioneC, dataNascitaC, dataRitiroC, piedePr, id_gio);

            		-- Inserisco ruolo
            		INSERT INTO Ruolo(ruolo, id_gio)
            		VALUES (ruolo, id_gio);

            		-- Genero un nuovo ID per la militanza
            		id_mil := genera_id('Militanza', 'id_militanza');

            		-- Inserisco militanza
            		INSERT INTO Militanza(inizio, fine, tirisegnati, partiteGiocate, squadra, giocatore, id_militanza)
            		VALUES (inizioMil, fineMil, tiriSegnati, partiteGiocate, nomeSquadra, id_gio, id_mil);

            		-- Inserisco goalSubiti se non è null
            		IF goalSubiti IS NOT NULL THEN

                		INSERT INTO Goalsubiti(goalSubiti, id_giocatore, id_militanza)
                		VALUES (goalSubiti, id_gio, id_mil);

            		END IF;
		END IF;
	ELSE
        	RAISE EXCEPTION 'Il calciatore è già presente';
    END IF;
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION genera_id(tabella varchar(50), tupla varchar(50))
RETURNS varchar(20) AS $$
DECLARE
    query varchar;
    num INT;
    id varchar(20);
BEGIN
    query := 'SELECT COALESCE(MAX(CAST(SUBSTRING(' || tupla || ' FROM 5) AS INT)), 0) + 1 FROM ' || tabella;

    EXECUTE query INTO num;

    IF tabella ILIKE 'Militanza' THEN
        id := 'MILI' || LPAD(CAST(num AS VARCHAR), 10, '0');
    ELSIF tabella ILIKE 'Calciatore' THEN
        id := 'CALC' || LPAD(CAST(num AS VARCHAR), 10, '0');
    END IF;

    RETURN id;
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION esegui_logica_ogni_6_mesi() 
RETURNS VOID AS $$ 
DECLARE
	dataCorrente date := NOW();
BEGIN   
	IF EXTRACT(MONTH FROM dataCorrente) = 12 THEN  			--inserimento invernale
		FOR squadra IN (SELECT nomesquadra FROM squadre) LOOP   --prendo tutte le squadre
			FOR militanza IN (SELECT * 			--e prendo tutte le militanze che non sono iniziate 
					  		  FROM militanza AS m 
					  		  WHERE (m.squadra = squadra) AND (fine IS NULL OR EXTRACT(YEAR FROM fine) > EXTRACT(YEAR FROM dataCorrente);  
							  --manca il controllo per non prendere quelli che hanno iniziato la militanza d'estate
							  --ma non lo faccio pochè dopo con l'if controllo se i giocatori con la militanza d'estate sono gia presenti nel db
							  LOOP
							  
							  IF NOT EXISTS(SELECT 1 
									FROM rosa AS r 
									WHERE r.id_giocatore = militanza.id_giocatore 
									AND r.squadra = squadra 
									AND r.anno = dataCorrente) THEN

							  	INSERT INTO rosa(id_giocatore, squadra, anno)
							  	VALUES (militanza.id_giocatore, squadra, dataCorrente);
							  
							  END IF;
			END LOOP;
		END LOOP;
		RAISE NOTICE 'Eseguito in sessione invernale: %', now(); 
	ELSE 
		FOR squadra IN (SELECT nomesquadra FROM squadre) LOOP
			FOR militanza IN (SELECT * 
					  		  FROM militanza AS m 
					  		  WHERE (m.squadra = squadra) AND (fine IS NULL OR EXTRACT(YEAR FROM fine) >= EXTRACT(YEAR FROM dataCorrente) 
															            AND EXTRACT(MONTH FROM fine) > 1);
							  LOOP
							  
							  IF NOT EXISTS(SELECT 1 
									FROM rosa AS r 
									WHERE r.id_giocatore = militanza.id_giocatore 
									AND r.squadra = squadra 
									AND r.anno = dataCorrente) THEN
								
							  	INSERT INTO rosa(id_giocatore, squadra, anno)
							  	VALUES (militanza.id_giocatore, squadra, dataCorrente);
							  
							  END IF;
			END LOOP;
		END LOOP;

		RAISE NOTICE 'Eseguito in sessione primaverile: %', now(); 
	END IF;
END; 
$$ LANGUAGE plpgsql;  

-- Pianifica l'esecuzione della funzione ogni 6 mesi 
SELECT cron.schedule('0 0 31 12,6 *', 'SELECT esegui_logica_ogni_6_mesi()');
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION inserisci_in_rosa()
RETURNS TRIGGER AS $$
DECLARE
    data DATE;
BEGIN
	--arrotondo data
	IF EXTRACT(MONTH FROM NEW.inizio) IN (7, 8, 9) THEN
        	data := DATE_TRUNC('YEAR', NEW.inizio) + INTERVAL '1 YEAR' - INTERVAL '1 DAY';
    	ELSE
        	data := DATE_TRUNC('YEAR', NEW.inizio) + INTERVAL '6 MONTHS' - INTERVAL '1 DAY';
    	END IF;

	--se siamo nel presente inserisco solo nella rosa attuale perche il resto verra fatto dalla funzione di manutenzione della rosa automatico
	IF EXTRACT(YEAR FROM NEW.inizio) >= EXTRACT(YEAR FROM NOW()) THEN	

    		INSERT INTO rosa(id_giocatore, squadra, anno)
    		VALUES (NEW.id_giocatore, NEW.squadra, data);

    		RETURN NEW;
	
	ELSE	--se invece l'inserimento inizia prima del presente allora inserisco dentro la rosa per ogni intervallo fino ad arrivare al presente in cui verra poi continuato dalla manutenzione


		WHILE EXTRACT(YEAR FROM data) < EXTRACT(YEAR FROM NOW()) LOOP
			
			IF EXTRACT(MONTH FROM data) = 6 THEN
				
				INSERT INTO rosa(id_giocatore, squadra, anno)
    				VALUES (NEW.id_giocatore, NEW.squadra, data);
			
				data := DATE_TRUNC('YEAR', data) + INTERVAL '1 YEAR' - INTERVAL '1 DAY';
			ELSE 
			
				INSERT INTO rosa(id_giocatore, squadra, anno)
    				VALUES (NEW.id_giocatore, NEW.squadra, data);

				data := DATE_TRUNC('YEAR', data + INTERVAL '1 YEAR') + INTERVAL '6 MONTHS' - INTERVAL '1 DAY';
			END IF;
		END LOOP;
	END IF;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER inserimentoRosa
AFTER INSERT ON Militanza
FOR EACH ROW
EXECUTE FUNCTION inserisci_in_rosa();
----------------------------------------------------------------------------------------------------------------
CALL insert_competizione_trofeoSquadra('Serie A', 2005, 'Italia', NULL, 'Serie A TIM', 2006);

CREATE OR REPLACE PROCEDURE insert_competizione_trofeoSquadra(
    nomeCompetizione varchar(100),
    annoInizio INT,
    nazionalita varchar(100),
    tipo varchar(100),
    nomeTrofeo varchar(100),
    annoFine INT)
AS $$
DECLARE
    	competizioneNaz competizioni_nazionali%ROWTYPE;
    	competizioneNonNaz competizioni_non_nazionali%ROWTYPE;
    	trofeoSquadra trofeo_squadra%ROWTYPE;
BEGIN
    	IF nazionalita IS NOT NULL THEN
        	-- se nazionalita non è null, allora vuol dire che è una competizione nazionale
        	IF NOT EXISTS(	
				SELECT 1
				FROM competizioni_nazionali AS c
        			WHERE LOWER(c.nome) LIKE LOWER(nomeCompetizione))
		THEN
            		-- vuol dire che non esiste ancora una competizione con gli stessi dati
            		IF NOT EXISTS( 
							SELECT 1
            				FROM trofeo_squadra AS t
            				WHERE LOWER(t.nome) LIKE LOWER(nomeTrofeo))
			THEN
                		-- vuol dire che non esiste un trofeo con quel nome
						INSERT INTO trofeo_squadra(nome, annovincita)
                		VALUES (nomeTrofeo, annoFine);
						
                		INSERT INTO competizioni_nazionali(nome, nazione, anno, nomeTrofeo, annoVincita)
                		VALUES (nomeCompetizione, nazionalita, annoInizio, nomeTrofeo, annoFine);
            		ELSE
                		RAISE EXCEPTION 'Un trofeo con questo nome esiste già';
            		END IF;
        	ELSE
            		RAISE EXCEPTION 'La competizione esiste già';
        	END IF;

    	ELSIF tipo IS NOT NULL THEN
        	-- se tipo non è null, vuol dire che è stata inserita una competizione non nazionale
        	IF NOT EXISTS(
				SELECT 1
        			FROM competizioni_non_nazionali AS c
        			WHERE LOWER(c.nome) LIKE LOWER(nomeCompetizione)) 
		THEN
            		-- vuol dire che non esiste una competizione con questo nome
            		IF NOT EXISTS(
					SELECT 1
            				FROM trofeo_squadra AS t
            				WHERE LOWER(t.nome) LIKE LOWER(nomeTrofeo))
			THEN
                		-- vuol dire che non esiste un trofeo con questo nome
						INSERT INTO trofeo_squadra(nome, annovincita)
                		VALUES (nomeTrofeo, annoFine);
						
                		INSERT INTO competizioni_non_nazionali(nome, tipo, anno, nomeTrofeo, annoVincita)
                		VALUES (nomeCompetizione, tipo, annoInizio, nomeTrofeo, annoFine);
            		ELSE
                		RAISE EXCEPTION 'Il trofeo esiste già';
            		END IF;
        	ELSE
            		RAISE EXCEPTION 'La competizione esiste già';
        	END IF;
    	END IF;
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION prendi_lista_nascite(
    nomeC VARCHAR(100), 
    cognomeC VARCHAR(100)
)
RETURNS VARCHAR(500) AS $$
DECLARE 
    	listaNascite VARCHAR(500) := '';  
	dataN DATE;	
BEGIN
	--prendo la data di nascita dei giocatori 
    	FOR dataN IN SELECT nascita FROM Calciatore WHERE nome = nomeC AND cognome = cognomeC
    	LOOP
        	listaNascite := listaNascite || '_' || dataN;
    	END LOOP;

    RETURN listaNascite;
END;
$$ LANGUAGE PLPGSQL;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE insert_squadrGiocaInCompetizione(
squadra varchar(100),
competizioneNome varchar(100),
anno INT)
AS $$

DECLARE
	compNaz competizioni_nazionali%ROWTYPE;
	compNonNaz competizioni_non_nazionali%ROWTYPE;
BEGIN	
	--Controllo il nome per vedere se è una competizione nazionale o meno
	IF EXISTS (SELECT * FROM competizioni_nazionali WHERE nome = competizioneNome) THEN

		--allora inserisco in squadra_gioca_in_competizione_nazionale

		INSERT INTO squadra_gioca_in_competizione_nazionale(squadra, nome, anno)
		VALUES (squadra, competizioneNome, anno);
	ELSE
		--allora inserisco in squadra_gioca_in_competizione_non_nazionale

		INSERT INTO squadra_gioca_in_competizione_non_nazionale(squadra, nome, anno)
		VALUES (squadra, competizioneNome, anno);
	END IF;
END;

----------------------------------------------------------------------------------------------------------------
CALL elimina_giocatore('CALC0000000002');

CREATE OR REPLACE PROCEDURE elimina_giocatore(
    id_giocatore VARCHAR(20)
)
AS $$ 
BEGIN
    -- Elimino da goalSubiti
    DELETE FROM goalSubiti AS g
    WHERE g.id_giocatore = id_giocatore;

    -- Elimino tutte le militanze dove è presente quel giocatore
    DELETE FROM Militanza AS m
    WHERE m.giocatore = id_giocatore;

    -- Elimino da ruoli
    DELETE FROM Ruolo AS r
    WHERE r.id_giocatore = id_giocatore;

    -- Elimino da rosa
    DELETE FROM Rosa AS r
    WHERE r.id_giocatore = id_giocatore;

    -- Elimino da trofeo_squadra_calciatore
    DELETE FROM trofeo_squadra_calciatore AS t
    WHERE t.calciatore = id_giocatore;

    -- Elimino da calciatore_possiede_feature_caratteristiche
    DELETE FROM calciatore_possiede_feature_caratteristiche AS c
    WHERE c.giocatore = id_giocatore;

    -- Elimino da trofeo individuale
    DELETE FROM trofeo_individuale 
    WHERE vincitore = id_giocatore;
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE insert_vincitore_in_trofeo_individuale(id_giocatore varchar(100), anno INT, trofeo varchar(100))
AS $$
BEGIN
	IF NOT EXISTS(
			SELECT 1
			FROM trofeo_individuale
			WHERE nome = trofeo AND annoVincita = anno)
	THEN
	
		UPDATE trofeo_individuale
		SET vincitore = id_giocatore
		WHERE nome = trofeo AND annoVincita = anno;
	
	ELSE
		RAISE EXCEPTION 'Il vincitore è gia stato assegnato';
	END IF;
END
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE insert_nuovo_trofeo(nomeTrofeo VARCHAR(100), anno INT)
AS $$

BEGIN
    	-- Controllo che non esista già un trofeo con questo nome
    	IF NOT EXISTS (SELECT * FROM trofeo_individuale WHERE nome ILIKE nomeTrofeo) THEN

        	INSERT INTO trofeo_individuale(nome, annoVincita)
        	VALUES (nomeTrofeo, anno);

    	ELSE
        	RAISE EXCEPTION 'Il trofeo esiste già';
    	END IF;
END
----------------------------------------------------------------------------------------------------------------
SELECT cron.schedule('0 0 1 1 *', 'SELECT istanzia_trofeo_per_nuovo_anno()');

CREATE OR REPLACE FUNCTION istanzia_trofeo_per_nuovo_anno()
RETURNS VOID AS $$
DECLARE
    	trophy trofeo_individuale%ROWTYPE;
	trophy2 trofeo_Squadra%ROWTYPE;
BEGIN
    	-- Creo di nuovo tutti i trofei per l'anno nuovo

	--Prendo tutti i trofei dell'anno precedente
    	FOR trophy IN 	SELECT DISTINCT nome, MAX(annoVincita) + 1 AS nuovo_anno, vincitore
        		FROM trofeo_individuale
    	LOOP
        	-- Controllo se è stato assegnato oppure deve ancora essere assegnato
        	IF trophy.vincitore IS NOT NULL THEN
            	
		INSERT INTO trofeo_individuale(nome, annoVincita)
            	VALUES(trophy.nome, trophy.nuovo_anno);
        	
		END IF;
    	END LOOP;

	FOR trophy2 IN 	SELECT DISTINCT nome, MAX(annoVincita) + 1 AS nuovo_anno, squadra
        		FROM trofeo_squadra
                  	GROUP BY nome
    	LOOP
        	-- Controllo se è stato assegnato oppure deve ancora essere assegnato
        	IF trophy2.squadra IS NOT NULL THEN
            	
		INSERT INTO trofeo_squadra(nome, annoVincita)
            	VALUES(trophy2.nome, trophy2.nuovo_anno);
        	
		END IF;
    	END LOOP;
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE insert_sponsor_secondari(
    nomeSponsor VARCHAR(100),
    finanziament INT,
    nomeSquadra VARCHAR(100)
)
AS $$ 
 
DECLARE
    sponsor_exists sponsor_secondari%ROWTYPE;
    sponsor_tec_exists sponsortec%ROWTYPE;
BEGIN
    -- Controllo che lo sponsor non sia già di un'altra squadra

	IF NOT EXISTS (
			SELECT 1
    			FROM sponsor_secondari
    			WHERE nome ILIKE nomeSponsor)
		THEN 
       	
		-- Faccio lo stesso controllo ma per gli sponsorTec
        	IF NOT EXISTS(
				SELECT 1
        			FROM sponsortec
        			WHERE nome ILIKE nomeSponsor)
			THEN

            		-- A questo punto lo sponsor è valido e lo inserisco
            		INSERT INTO sponsor_secondari(nome, squadra)
            		VALUES (nomeSponsor, nomeSquadra);

			IF finanziament IS NOT NULL THEN

				UPDATE sponsor_secondari
				SET finanziamento = finanziament
				WHERE nome = nomeSponsor;
			END IF;
        	ELSE
            		RAISE EXCEPTION 'Lo sponsor è già sponsor tecnico di un altra squadra';    
        	END IF;
    	ELSE
        	RAISE EXCEPTION 'Lo sponsor è già sponsor secondario di un altra squadra';
    	END IF;
END 
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE insert_squadra_on_trofeoSquadra(
nazione varchar(100),
nomeCampionato varchar(100),
squadraVincitrice varchar(100))
AS $$

DECLARE
	compNaz competizioni_nazionali%ROWTYPE;
	compNonNaz competizioni_non_nazionali%ROWTYPE;
	trofeo trofeo_squadra%ROWTYPE;
BEGIN
	IF nazione IS NOT NULL THEN
		--significa che è un campionato nazionale
	
		SELECT *
		INTO compNaz
		FROM competizioni_nazionali AS c
		WHERE c.nome ILIKE nomeCampionato AND c.nazione ILIKE nazione;

		UPDATE trofeo_squadra AS t
		SET t.squadra = squadraVincitrice
		WHERE t.nome ILIKE compNaz.nometrofeo AND t.squadra IS NULL;
	ELSE
		--significa che è un campionato non nazionale

		SELECT *
		INTO compNonNaz
		FROM competizioni_non_nazionali AS c
		WHERE c.nome ILIKE nomeCampionato;

		UPDATE trofeo_squadra AS t
		SET t.squadra = squadraVincitrice
		WHERE t.nome ILIKE compNonNaz.nometrofeo AND t.squadra IS NULL;
	END IF;
END;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE insert_feature(
    nomeFeature VARCHAR(100)
)
AS $$ 
BEGIN
    	-- Controllo che non esista già una feature con questo nome
    	IF NOT EXISTS (SELECT 1
        	       FROM feature_caratteristiche
        	       WHERE tipologia ILIKE nomeFeature
    	) THEN
        	-- La feature non esiste, la inserisco
        	INSERT INTO feature_caratteristiche(tipologia)
        	VALUES (nomeFeature);
    	ELSE
        	RAISE EXCEPTION 'La feature esiste già';
    	END IF;
END $$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION prendi_solo_feature_disponibili(id_giocatore VARCHAR(20))
RETURNS VARCHAR(1000) AS $$
DECLARE
    	feature feature_caratteristiche%ROWTYPE;
    	stringaDiRitorno VARCHAR(1000) := '';  -- Inizializzo la stringa vuota
BEGIN
   	-- Scorro un for per creare una stringa di feature caratteristiche disponibili
    	FOR feature IN 	SELECT *
                   	FROM feature_caratteristiche
                   	WHERE tipologia NOT IN (SELECT tipo
                                          	FROM giocatore_possiede_feature_caratteristiche
                                          	WHERE giocatore = id_giocatore)
    	LOOP
        	-- Concateno il campo tipologia della feature alla stringa di ritorno
        	stringaDiRitorno := stringaDiRitorno || '_' || feature.tipologia;
    	END LOOP;

    	RETURN stringaDiRitorno;
END
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------------------------------------------
CALL insert_militanza('CALC0000000006', NULL, '2006-07-04','2009-09-12', 'Lecce', 98, 43, 10);

CREATE OR REPLACE PROCEDURE insert_militanza(
    id_giocatore varchar(20), 
    fineExMilitanza DATE, 
    inizioNuovaMilitanza DATE, 
    fineNuovaMilitanza DATE, 
    squadra varchar(100), 
    tiriSegnati INT, 
    partiteGiocate INT, 
    goalSubiti INT)
AS $$
DECLARE
	lastMil Militanza%ROWTYPE;
   	lastDate DATE;
    numM INT;
    id_mil varchar(20);
	
BEGIN
    		IF fineExMilitanza IS NOT NULL THEN

        		-- se non era stata impostata una data di fine militanza allora questo valore sarà diverso da null
        		-- prendo la militanza ancora in atto

        		SELECT *
        		INTO lastMil
        		FROM Militanza AS M
        		WHERE M.giocatore LIKE id_giocatore AND M.fine IS NULL;
		
			IF LOWER(lastMil.squadra) <> LOWER(squadra) THEN

        		IF fineExMilitanza >= NOW() 
                AND EXTRACT(MONTH FROM fineExMilitanza) IN (1, 7, 8, 9)  
				AND inizioNuovaMilitanza >= fineExMilitanza THEN            		
					-- mi assicuro che la fine della vecchia militanza 
                    --sia valida e la inserisco

            		UPDATE Militanza AS M
            		SET M.fine = fineExMilitanza
            		WHERE M.giocatore LIKE id_giocatore AND M.fine IS NULL;
            		-- inserisco la nuova militanza senza controllare 
                    --la validità poiché già stato fatto sull'applicativo
            		
					id_mil := genera_id('Militanza', 'id_militanza');

            		INSERT INTO Militanza(inizio, fine, giocatore, squadra, tirisegnati, partitegiocate, id_militanza)
            		VALUES (inizioNuovaMilitanza, fineNuovaMilitanza, id_giocatore, squadra, tiriSegnati, partiteGiocate, id_mil);

            		IF goalSubiti IS NOT NULL THEN
                			
                        INSERT INTO goalSubiti
                        (goalSubiti, id_giocatore, id_militanza)
                		VALUES (goalSubiti, id_giocatore, id_mil);
            		END IF;
        		ELSE
            		RAISE EXCEPTION 'Data fine vecchia Militanza non valida';
        		END IF;
			ELSE
				RAISE EXCEPTION 'Il giocatore si trova gia nella squadra';
			END IF;
    	ELSE
        	SELECT *
			INTO lastMil
   			FROM Militanza m	
            WHERE m.giocatore = id_giocatore
            AND m.fine = (SELECT MAX(fine)
        			      FROM Militanza AS mi
        			      WHERE mi.giocatore = id_giocatore);
		
			IF LOWER(lastMil.squadra) <> LOWER(squadra) THEN

				IF inizioNuovaMilitanza >= lastMil.fine THEN      
                -- non faccio il controllo dei mesi perché già fatto sull'applicativo 

            		id_mil := genera_id('Militanza', 'id_militanza');

            		INSERT INTO Militanza(inizio, fine, giocatore, squadra, tirisegnati, partitegiocate, id_militanza)
            		VALUES (inizioNuovaMilitanza, fineNuovaMilitanza, id_giocatore, squadra, tiriSegnati, partiteGiocate, id_mil);

	    			IF goalSubiti IS NOT NULL THEN
                		
                        INSERT INTO goalSubiti
                        (goalSubiti, id_giocatore, id_militanza)
                		VALUES (goalSubiti, id_giocatore, id_mil);
            		END IF;
        		ELSE
            		RAISE EXCEPTION 'Data inizio Militanza non valida';
        		END IF;
			ELSE
				RAISE EXCEPTION 'Il giocatore si trova gia nella squadra';
			END IF;
    	END IF;
END;
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION prendi_squadre_idonee(
	nazionale varchar(100),
	type varchar(100),
	nomeCampionato varchar(100),
	annoInizio INT)
RETURNS varchar(5000) AS $$ù

DECLARE
	listaSquadreIdonee VARCHAR(5000);
	squadra VARCHAR(100);
BEGIN
	--Se nazionale non è null vuol dire che è una competizione nazione
	IF nazionale IS NOT NULL THEN

		--prendo tutte le squadre che hanno la nazionalità inserita e che rispettino il massimo
		--e il minimo di giocatori della rosa per partecipare alle competizioni

		FOR squadra IN (SELECT S.nomeSquadra
						FROM squadre AS S
						JOIN Rosa AS R ON S.nomeSquadra = R.Squadra
						WHERE S.nazionalita = nazionalita
  							AND EXTRACT(YEAR FROM R.Anno) = annoInizio 
  							AND EXTRACT(MONTH FROM R.Anno) = 6
						GROUP BY S.nomeSquadra
						HAVING COUNT(DISTINCT R.ID_Giocatore) BETWEEN 16 AND 24
  							AND S.nomeSquadra NOT IN (SELECT SGIC.nomeSquadra
    							  	  				  FROM squadra_gioca_in_competizione_nazionale AS SGIC
    							  	  				  WHERE SGIC.anno = annoInizio))

		LOOP
			listaSquadreIdonee := listaSquadreIdonee || '_' || squadra;
		END LOOP;
	ELSE
		FOR squadra IN (SELECT squadra
						FROM Rosa AS R
						WHERE EXTRACT(YEAR FROM R.anno) = annoInizio 
							AND EXTRACT(MONTH FROM R.anno) = 6
						GROUP BY R.Squadra
						HAVING COUNT(R.ID_Giocatore) BETWEEN 16 AND 24
							AND R.squadra NOT IN (SELECT SGIC.nomeSquadra
    							      			  FROM squadra_gioca_in_competizione_nazionale AS SGIC
    							      			  WHERE SGIC.anno = annoInizio))
		LOOP
			listaSquadreIdonee := listaSquadreIdonee || '_' || squadra;
		END LOOP;
	END IF;
RETURN listaSquadreIdonee;
END;

----------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION controlla_utente()
RETURNS TRIGGER AS $$
BEGIN
    	IF NOT EXISTS (SELECT 1 FROM utente WHERE login = NEW.login) THEN
        	RETURN NEW;
    	ELSE
        	RAISE EXCEPTION 'Nome Utente già utilizzato';
    	END IF;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER insert_utente
BEFORE INSERT ON utente
FOR EACH ROW
EXECUTE FUNCTION controlla_utente();
----------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION squadreNonIdonee()
RETURNS VOID AS $$
DECLARE
	numGiocatori INT;
BEGIN
	FOR competizioni IN (	SELECT DISTINCT(nome) 
							FROM squadra_gioca_in_competizioni_nazionali 
							WHERE EXTRACT(YEAR FROM anno) = EXTRACT(YEAR FROM NOW() - interval '1 year')) 
						LOOP

		FOR squadre IN (SELECT squadra 
						FROM squadra_gioca_in_competizioni_nazionali 
						WHERE nome = competizioni.nome) 
						LOOP

			SELECT COUNT(*) INTO numGiocatori 
			FROM rosa 
			WHERE squadra = squadre 
			AND EXTRACT(YEAR FROM anno) = EXTRACT(YEAR FROM NOW() - interval '1 year') 
			AND EXTRACT(MONTH FROM anno) = 12;

			IF numGiocatori NOT BETWEEN 16 AND 24 THEN
				DELETE FROM squadra_gioca_in_competizioni_nazionali 
				WHERE squadra = squadre 
				AND EXTRACT(YEAR FROM anno) = EXTRACT(YEAR FROM NOW() - interval '1 year');
			END IF;
		END LOOP;
	END LOOP;
END;
$$ LANGUAGE plpgsql;

SELECT cron.schedule('0 0 1 1 *', 'SELECT squadreNonIdonee()');
